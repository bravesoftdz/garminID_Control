unit Unit1;

interface

uses
  System.Classes, System.SysUtils, System.Types, System.UITypes,  System.Variants,
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.TabControl,
  FMX.StdCtrls, FMX.Gestures, System.Rtti, FMX.Grid.Style, FMX.ScrollBox ;

type
  TMyThread = class(TThread)
  protected
    procedure Execute; override;
    //procedure Create; override;
    procedure compare;
  end;

implementation
uses TabbedTemplate;


procedure TMyThread.compare;
var
  tmpLogData, rowLogData, rowTmpLogData: TStringList;
  I,J, duplicateFound : Integer;
begin
  tmpLogData := TStringList.Create;
  tmpLogData:= TabbedTemplate.logData;
  duplicateFound := 0;
  TabbedForm.ListBox3.Clear;

  for I := 0 to 10 do
  begin
    rowLogData:=TStringList.Create;
    rowLogData.Text:= logData[I];
    rowLogData.CommaText := rowLogData.Text;
    rowLogData.Delimiter:= ',';

    for J := I+1 to 10 do
    begin
      rowTmpLogData:=TStringList.Create;
      rowTmpLogData.Text:= tmpLogData[I];
      rowTmpLogData.CommaText := rowTmpLogData.Text;
      rowTmpLogData.Delimiter:= ',';

      //comparasi
      if (rowLogData[2]+rowLogData[3] <> rowTmpLogData[2] + rowTmpLogData[3] ) then
      begin
         duplicateFound:= duplicateFound+1;
         TabbedForm.ListBox3.Items.Add( rowLogData[2]+rowLogData[3] + ' <> ' + rowTmpLogData[2] + rowTmpLogData[3]  )
      end;

    end;
  end;

    TabbedForm.Label14.Text := IntToStr(duplicateFound);
end;



procedure TMyThread.Execute;
begin
  NameThreadForDebugging('ComparingThread');
  { Place thread code here }
   compare();
end;



end.
